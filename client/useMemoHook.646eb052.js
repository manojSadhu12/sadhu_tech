import{l as e,m as n,o as t,n as a,t as o,p as s,q as r,e as c,s as i,C as u,c as m,d as p,b as l,f as d,h as g,i as f,S as h,j as $,k as b}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as y,a as v,P as x,N as w,C as k}from"./index.7beba4f9.js";function M(c){let i;const u=new y({props:{data:"useMemo",id:"useMemo",isBig:"true"}}),m=new v({props:{language:"javascript",uid:"8c4ec4f1-717b-11ea-97c6-61ac10c437eb",data:"/**\n * @param first param is a factory function.\n * @param second param is the list of dependencies\n * @returns the memoized value, factory function will be recomputed only changes if one of the dependencies has changed.\n */\n\nconst memoizedValue = useMemo(\n    (//arguments are not allowed) => {\n        //compute expensive code and return a value\n    }, [\n        //dependencies list\n    ]);",pic:"",ratio:"4",highlight:""}}),p=new x({props:{data:"<p><br></p><p>We know that all the code inside the function component executes for every render. So all the functions inside the component will be reexecuted for every so it is an performance issue.</p><p><br></p><p>So we can use the useMemo hook to only reexecute the function if any of the dependencies in the second param (dependencies list) is changed, React makes a shallow comparision(i.e reference comparision) of dependencies to find out the changes.</p><p><br></p><p>Every value used in the factory function should be mentioned in the dependencies list.</p><p><br></p>"}}),l=new v({props:{language:"javascript",uid:"da20daf1-719a-11ea-97c6-61ac10c437eb",data:"import React, {useMemo, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nconst Product = () => {\n    const [productName, setProductName] = useState(\"\");\n    const [amount, setAmount] = useState(1);\n    const calculatedAmount = useMemo(\n        () => {\n            console.log(\"Expensive Execution\");\n            for (let i = 0; i < 1000000000; i++) ;// Simulating  a delay\n            return amount * 2;\n        }, [amount]);\n\n    return (\n        <React.Fragment>\n            <input placeholder=\"Product Name\"\n                   value={productName} onChange={e => setProductName(e.target.value)}/>\n            \n            <input type='number' placeholder=\"Amount\"\n                   value={amount} onChange={e => setAmount(+e.target.value)}/>\n            \n            <p>{calculatedAmount}</p>\n        </React.Fragment>\n    );\n};\n\nexport default Product;\n\nReactDOM.render(<Product/>, document.getElementById('root'));",pic:"/images/da86ed50-f336-11e9-b4ff-ad48fafeab92___01e396e0-71a0-11ea-97c6-61ac10c437eb.png",ratio:"8",highlight:"8-13"}}),d=new x({props:{data:'<p>In the above example lines 8-13 show the usage of <span style="background-color: black; color: rgb(255, 255, 255);"> useMemo </span> hook, <strong>amount </strong>is given as a dependency.</p><p><br></p><p>Line 11 is written to make some delay in execution to show some expensive code is executed.</p><p><br></p><p>When the page loads <strong>"Expensive Execution log" </strong>prints to the console and it evaluates <strong>calculatedAmount </strong>value. For any change in the <strong>productName </strong>state <span style="background-color: black; color: rgb(255, 255, 255);"> useMemo </span> won\'t execute the factory method, you can see it because there wont be any log in the console. The factory method is only executed for changes in amount so you can see the log in the console.</p>'}}),g=new w({props:{data:'<ul><li>Use <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useMemo </span> only for expensive calculations. Don\'t use <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useMemo </span> in many places for every small calculations it may lead to negative performance.</li><li>Don\'t use <span style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useMemo </span> when there are no dependancies, if there are no dependancies <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">useMemo </span> executes for every single render. In this case <a href="/courses/reactJs/reactHooks/useRefHook" target="_blank">useRef hook</a> is the best fit.</li></ul>'}});return{c(){e(u.$$.fragment),e(m.$$.fragment),e(p.$$.fragment),e(l.$$.fragment),e(d.$$.fragment),e(g.$$.fragment)},l(e){n(u.$$.fragment,e),n(m.$$.fragment,e),n(p.$$.fragment,e),n(l.$$.fragment,e),n(d.$$.fragment,e),n(g.$$.fragment,e)},m(e,n){t(u,e,n),t(m,e,n),t(p,e,n),t(l,e,n),t(d,e,n),t(g,e,n),i=!0},p:a,i(e){i||(o(u.$$.fragment,e),o(m.$$.fragment,e),o(p.$$.fragment,e),o(l.$$.fragment,e),o(d.$$.fragment,e),o(g.$$.fragment,e),i=!0)},o(e){s(u.$$.fragment,e),s(m.$$.fragment,e),s(p.$$.fragment,e),s(l.$$.fragment,e),s(d.$$.fragment,e),s(g.$$.fragment,e),i=!1},d(e){r(u,e),r(m,e),r(p,e),r(l,e),r(d,e),r(g,e)}}}function j(a){let h,$,b;const y=new k({props:{$$slots:{default:[M]},$$scope:{ctx:a}}});return{c(){h=c("meta"),$=i(),e(y.$$.fragment),this.h()},l(e){const t=u('[data-svelte="svelte-283jb9"]',document.head);h=m(t,"META",{name:!0,content:!0}),t.forEach(p),$=l(e),n(y.$$.fragment,e),this.h()},h(){document.title="react useMemo",d(h,"name","description"),d(h,"content","react useMemo")},m(e,n){g(document.head,h),f(e,$,n),t(y,e,n),b=!0},p(e,[n]){const t={};1&n&&(t.$$scope={dirty:n,ctx:e}),y.$set(t)},i(e){b||(o(y.$$.fragment,e),b=!0)},o(e){s(y.$$.fragment,e),b=!1},d(e){p(h),e&&p($),r(y,e)}}}export default class extends h{constructor(e){super(),$(this,e,null,j,b,{})}}
