import{l as e,m as t,o as a,n,t as s,p as r,q as o,e as i,s as l,C as p,c,d as g,b as $,f as m,h as d,i as f,S as b,j as u,k as S}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as h,P as y,a as k,C as w}from"./index.7beba4f9.js";function C(i){let l;const p=new h({props:{data:"Inline CSS in JSX",id:"inlineCSSInJSX",isBig:"true"}}),c=new y({props:{data:"<p>Inline CSS should be given as a Javascript object with CSS properties. The Javascript object with styles should be wrapped in curly braces in JSX.</p>"}}),g=new h({props:{data:"Inline CSS with actual CSS properies names",id:"inlineCSSWithActualCSSProperiesNames"}}),$=new k({props:{language:"javascript",uid:"0a58dfb1-19d0-11ea-8832-2b96578e9245",data:'const styles = {\n    "font-size": "100px",\n    "font-weight": "bold",\n    "background-color": "orange"\n};\n\nconst styledElement = <p style={styles}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}}),m=new y({props:{data:'<p>Observe the <span style="background-color: black;"> </span><span style="background-color: black; color: rgb(255, 255, 255);">styles</span><span style="background-color: black;"> </span> object all the CSS properties are wrapped in <span style="background-color: black; color: rgb(255, 255, 255);">"</span>  <span style="background-color: black; color: rgb(255, 255, 255);">"</span>. This is because Javascript doesn`t allow <span style="background-color: black;"> </span><span style="background-color: black; color: rgb(255, 255, 255);">-</span><span style="background-color: black;"> </span> in object\'s key name if it is not written in string format.</p><p><br></p><p>Alternately CSS properties can also be used in camel case in React.</p>'}}),d=new h({props:{data:"Inline CSS with camel cased properies",id:"inlineCSSWithCamelCasedProperies"}}),f=new k({props:{language:"javascript",uid:"b69d2211-19ce-11ea-8832-2b96578e9245",data:'const styles = {\n    fontSize: "100px",\n    fontWeight: "bold",\n    backgroundColor: "orange"\n};\n\nconst styledElement = <p style={styles}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}}),b=new y({props:{data:'<p>Observe the <span style="background-color: black;"> </span><span style="background-color: black; color: rgb(255, 255, 255);">styles</span><span style="background-color: black;"> </span> object it contains CSS properties in camel case.</p><p><strong>font-size</strong> as <strong><em>fontSize</em></strong></p><p><strong>font-weight</strong> as <strong><em>fontWeight</em></strong></p><p><strong>background-color</strong> as <strong><em>backgroundColor</em></strong></p><p>This is valid in React. React internally converts then to actual CSS properties.</p><p><br></p><p>Instead of refering a javascript object we can also put it directly in JSX.</p>'}}),u=new k({props:{language:"javascript",uid:"68c721b1-1af2-11ea-93f9-2b47fa5df4bc",data:'const styledElement = <p style={{fontSize:"100px"}}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}});return{c(){e(p.$$.fragment),e(c.$$.fragment),e(g.$$.fragment),e($.$$.fragment),e(m.$$.fragment),e(d.$$.fragment),e(f.$$.fragment),e(b.$$.fragment),e(u.$$.fragment)},l(e){t(p.$$.fragment,e),t(c.$$.fragment,e),t(g.$$.fragment,e),t($.$$.fragment,e),t(m.$$.fragment,e),t(d.$$.fragment,e),t(f.$$.fragment,e),t(b.$$.fragment,e),t(u.$$.fragment,e)},m(e,t){a(p,e,t),a(c,e,t),a(g,e,t),a($,e,t),a(m,e,t),a(d,e,t),a(f,e,t),a(b,e,t),a(u,e,t),l=!0},p:n,i(e){l||(s(p.$$.fragment,e),s(c.$$.fragment,e),s(g.$$.fragment,e),s($.$$.fragment,e),s(m.$$.fragment,e),s(d.$$.fragment,e),s(f.$$.fragment,e),s(b.$$.fragment,e),s(u.$$.fragment,e),l=!0)},o(e){r(p.$$.fragment,e),r(c.$$.fragment,e),r(g.$$.fragment,e),r($.$$.fragment,e),r(m.$$.fragment,e),r(d.$$.fragment,e),r(f.$$.fragment,e),r(b.$$.fragment,e),r(u.$$.fragment,e),l=!1},d(e){o(p,e),o(c,e),o(g,e),o($,e),o(m,e),o(d,e),o(f,e),o(b,e),o(u,e)}}}function j(n){let b,u,S;const h=new w({props:{$$slots:{default:[C]},$$scope:{ctx:n}}});return{c(){b=i("meta"),u=l(),e(h.$$.fragment),this.h()},l(e){const a=p('[data-svelte="svelte-l7wbb9"]',document.head);b=c(a,"META",{name:!0,content:!0}),a.forEach(g),u=$(e),t(h.$$.fragment,e),this.h()},h(){document.title="Inline CSS in JSX",m(b,"name","description"),m(b,"content","Inline CSS in JSX")},m(e,t){d(document.head,b),f(e,u,t),a(h,e,t),S=!0},p(e,[t]){const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),h.$set(a)},i(e){S||(s(h.$$.fragment,e),S=!0)},o(e){r(h.$$.fragment,e),S=!1},d(e){g(b),e&&g(u),o(h,e)}}}export default class extends b{constructor(e){super(),u(this,e,null,j,S,{})}}
