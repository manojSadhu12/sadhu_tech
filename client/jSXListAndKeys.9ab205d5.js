import{l as e,m as a,o as n,n as t,t as r,p as s,q as i,e as o,s as m,C as d,c as f,d as $,b as p,f as g,h as c,i as l,S as u,j as h,k as y}from"./client.f707559f.js";import"./Icon.b3087117.js";import"./Button.46d81a0e.js";import"./Image.a80d16de.js";import"./stores.ec09ff7a.js";import{H as b,P as v,a as w,C as k}from"./index.b8f1b6e6.js";function j(o){let m;const d=new b({props:{data:"JSX List and Keys",id:"jSXListAndKeys",isBig:"true"}}),f=new b({props:{data:"List in JSX",id:"listInJSX"}}),$=new v({props:{data:'<p>To output a list of JSX elements we have to convert regular Javascript Array into array of JSX elements. For this we use <span style="background-color: rgb(230, 0, 0);">Javascript map</span>.</p>'}}),p=new w({props:{language:"javascript",uid:"800bf481-2467-11ea-9535-7fba82c7bc40",data:'const friends = [\n    {name: "Friend 1", age: 25},\n    {name: "Friend 2", age: 24},\n    {name: "Friend 3", age: 26}\n];\n\nfunction App() {\n    return (\n        <ul>\n            {friends.map(friend => (\n                <li value>{friend.name} - {friend.age}</li>\n            ))}\n        </ul>\n    )\n}',pic:"/images/da86ed50-f336-11e9-b4ff-ad48fafeab92___95a85bf0-246f-11ea-8988-81bac9bb2a1f.jpg",ratio:"8",highlight:"10-12"}}),g=new v({props:{data:'<p>Observe lines 10 to 12. Here <em>friends</em> is a normal Javascript array and <span style="background-color: rgb(230, 0, 0);">map</span> has converted it into JSX array. As this array is dynamic we have wrapped this in <em>{</em>   <em>}</em>.</p><p>The above code work\'s but if you open console you will get a worning like <strong><em>Each child in a list should have a unique "key" prop</em></strong>.</p>'}}),c=new b({props:{data:"JSX keys",id:"jSXKeys"}}),l=new v({props:{data:"<p><em>key</em> is a special attribute that React provides which is not there in HTML.</p><p>Unique keys should be given to the elements inside array so React can identify which items have changed or added or removed.</p>"}}),u=new w({props:{language:"javascript",uid:"a15dad41-1ee0-11ea-9f91-6bb67c0552fe",data:'const friends = [\n    {id: "id1", name: "Friend 1", age: 25},\n    {id: "id2", name: "Friend 2", age: 24},\n    {id: "id3", name: "Friend 3", age: 26}\n];\n\nfunction App() {\n    return (\n        <ul>\n            {friends.map(friend => (\n                <li key={friend.id} value>{friend.name} - {friend.age}</li>\n            ))}\n        </ul>\n    )\n}',ratio:"4",highlight:""}}),h=new v({props:{data:"<p>This code work's without wornings.</p><ul><li>Unique string should be given as key for elements inside array.</li><li>React uses <em>key</em> to identify DOM elements.</li><li>Never use index as key if order of elements may change, if the order of the list is changed, previous key will represent another element but React cannot identify it because if the key is same as before React assumes that the DOM element represents the same component as before and this leads to inconsistency in application state.</li></ul>"}});return{c(){e(d.$$.fragment),e(f.$$.fragment),e($.$$.fragment),e(p.$$.fragment),e(g.$$.fragment),e(c.$$.fragment),e(l.$$.fragment),e(u.$$.fragment),e(h.$$.fragment)},l(e){a(d.$$.fragment,e),a(f.$$.fragment,e),a($.$$.fragment,e),a(p.$$.fragment,e),a(g.$$.fragment,e),a(c.$$.fragment,e),a(l.$$.fragment,e),a(u.$$.fragment,e),a(h.$$.fragment,e)},m(e,a){n(d,e,a),n(f,e,a),n($,e,a),n(p,e,a),n(g,e,a),n(c,e,a),n(l,e,a),n(u,e,a),n(h,e,a),m=!0},p:t,i(e){m||(r(d.$$.fragment,e),r(f.$$.fragment,e),r($.$$.fragment,e),r(p.$$.fragment,e),r(g.$$.fragment,e),r(c.$$.fragment,e),r(l.$$.fragment,e),r(u.$$.fragment,e),r(h.$$.fragment,e),m=!0)},o(e){s(d.$$.fragment,e),s(f.$$.fragment,e),s($.$$.fragment,e),s(p.$$.fragment,e),s(g.$$.fragment,e),s(c.$$.fragment,e),s(l.$$.fragment,e),s(u.$$.fragment,e),s(h.$$.fragment,e),m=!1},d(e){i(d,e),i(f,e),i($,e),i(p,e),i(g,e),i(c,e),i(l,e),i(u,e),i(h,e)}}}function J(t){let u,h,y;const b=new k({props:{$$slots:{default:[j]},$$scope:{ctx:t}}});return{c(){u=o("meta"),h=m(),e(b.$$.fragment),this.h()},l(e){const n=d('[data-svelte="svelte-1jyj5b9"]',document.head);u=f(n,"META",{name:!0,content:!0}),n.forEach($),h=p(e),a(b.$$.fragment,e),this.h()},h(){document.title="JSX List and Keys",g(u,"name","description"),g(u,"content","JSX List and Keys")},m(e,a){c(document.head,u),l(e,h,a),n(b,e,a),y=!0},p(e,[a]){const n={};1&a&&(n.$$scope={dirty:a,ctx:e}),b.$set(n)},i(e){y||(r(b.$$.fragment,e),y=!0)},o(e){s(b.$$.fragment,e),y=!1},d(e){$(u),e&&$(h),i(b,e)}}}export default class extends u{constructor(e){super(),h(this,e,null,J,y,{})}}
