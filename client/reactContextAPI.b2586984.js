import{l as e,m as t,o as n,n as a,t as r,p as o,q as s,e as p,s as d,C as c,c as m,d as i,b as u,f as $,h as g,i as f,S as h,j as l,k as P}from"./client.f707559f.js";import"./Icon.b3087117.js";import"./Button.46d81a0e.js";import"./Image.a80d16de.js";import"./stores.ec09ff7a.js";import{H as x,P as C,b as w,a as b,C as v}from"./index.b8f1b6e6.js";function A(p){let d;const c=new x({props:{data:"React Context API and using it in Class Components",id:"reactContextAPIAndUsingItInClassComponents",isBig:"true"}}),m=new C({props:{data:'<p>React Context API has become stable and can be used in production from React\'s version 16.3.0.</p><p><br></p><p>This chapter explains What is Context API, How it works and using Context API with class components.</p><p><a href="/courses/reactJs/reactHooks/useContextHook" target="_blank">useContextHook</a> chapter explains using Context API with function components.</p>'}}),i=new x({props:{data:"Why to use Context API",id:"whyToUseContextAPI"}}),u=new C({props:{data:"<p>In React we used to face prop-drilling problem. This is an issue where you need to pass a prop down the component tree where few components wont use the prop and acts as a middle man and pass them to other component in a deep nested tree which uses that prop.</p><p><br></p><p>Here we may do many unnecessory props forwarding. So this problem can be solved with context api.</p>"}}),$=new x({props:{data:"How Context API works",id:"howContextAPIWorks"}}),g=new C({props:{data:"<p>Context is designed to share data that can be considered “global” for a tree of React components.</p><p><br></p><p>Context api gives us 2 components:</p><p> 1) <strong>Provider:</strong> This is a react component which holds state and common functions.</p><p> 2) <strong>Consumer:</strong> The consumer can access state and common functions of the provider.</p>"}}),f=new w({props:{pic:"/images/da86ed50-f336-11e9-b4ff-ad48fafeab92___ad7ac5a0-73e9-11ea-be82-abf696c28696.jpeg",ratio:"5"}}),h=new C({props:{data:"<p>As the above picture illustrates all the consumers should be the childs of the provider.</p><p><br></p><p>The provider shares the state amoung the consumers irrespective of their nesting in the component tree.</p><p>When state changes all the consumers will be re-rendered with the new state.</p><p><br></p><p>Now let us see how we can implement context api in code.</p>"}}),l=new x({props:{data:"React.createContext",id:"reactCreateContext"}}),P=new b({props:{language:"javascript",uid:"723ac2d1-740a-11ea-be82-abf696c28696",data:"/** \n * @param takes a default value, it can be number, string or object.\n * @return reference of the context, always take a variable name that starts with capital letter.\n*/ \n    \nconst Context = React.createContext(defaultValue);\n\nContext.Provider //Provider component\nContext.Consumer //Consumer component",pic:"",ratio:"4",highlight:""}}),v=new x({props:{data:"Context.Provider",id:"contextProvider"}}),A=new b({props:{language:"javascript",uid:"f3a33581-741b-11ea-be82-abf696c28696",data:"<Context.Provider value={{\n    //state and common methods\n}}> \n    {this.props.children}\n</Context.Provider>",pic:"",ratio:"4",highlight:""}}),I=new C({props:{data:"<p>This is the way we use <em>Context.Provider</em>.</p><p><em>Context.Provider</em> takes 2 props:</p><p> 1) <strong>value: </strong>This is an object that contains state and methods to update state.</p><p> 2) children prop.</p><p><br></p>"}}),R=new b({props:{language:"javascript",uid:"f2a86551-741c-11ea-be82-abf696c28696",data:"class ProductsProvider extends Component {\n    state = {products: []};\n\n    render() {\n        return (\n            <ProductsContext.Provider value={{\n                state: this.state,\n                addProduct: (newProduct) => this.setState(currentState => {\n                    return {products: [...currentState.products, newProduct]}\n                })\n            }}>\n                {this.props.children}\n            </ProductsContext.Provider>\n        );\n    }\n}",pic:"",ratio:"4",highlight:"6-13"}}),k=new C({props:{data:"<p>This is an example of using <em>Provider</em></p><p>We are using <strong>ProductsProvider </strong>component as a provider. This component is a provider because we are returning <em>&lt;ProductsContext.Provider&gt;</em></p><p><br></p><p>As told before we are giving 2 props for this provider. To the <strong>value prop</strong> we are passing state of this component and a function <strong>addProduct</strong>.</p>"}}),S=new x({props:{data:"Context.Consumer",id:"contextConsumer"}}),j=new b({props:{language:"javascript",uid:"337fa401-7420-11ea-be82-abf696c28696",data:"<Context.Consumer>\n    {(contextValue) => (\n        //return React component that uses the context \n    )} \n</Context.Consumer>",pic:"",ratio:"4",highlight:""}}),T=new C({props:{data:"<p>This is the way we use <em>Context.Consumer</em>.</p><p><em>Context.Consumer</em> takes a single children prop which is function.</p><p><br></p><p>React passes <strong>contextValue</strong> to this function. So the React component that was returned by this function can use the <strong>contextValue</strong>. This <strong>contextValue</strong> is the value prop that we have passed to the <em>Provider</em>.</p><p><br></p>"}}),y=new b({props:{language:"javascript",uid:"71aeb801-7421-11ea-be82-abf696c28696",data:"class AddProduct extends Component {\n    state = {productName: ''};\n\n    render() {\n        return (\n            <ProductsContext.Consumer>\n                {(contextValue) => (\n                    <form onSubmit={(e) => {\n                        e.preventDefault();\n                        contextValue.addProduct({name: this.state.productName, id: new Date().getTime()});\n                        this.setState({productName: ''})\n                    }}>\n                        <input placeholder='Product Name' value={this.state.productName}\n                               onChange={e => this.setState({productName: e.target.value})}/>\n                        <button type='submit'>Add Product</button>\n                    </form>\n                )}\n            </ProductsContext.Consumer>\n        );\n    }\n}",pic:"",ratio:"4",highlight:"6-18"}}),N=new C({props:{data:"<p>This is an example of using <em>Consumer</em></p><p>Lines 6-18 shows the usage of <em>Consumer</em>. We have returned a form to add a product from the Consumer children prop.</p><p>Here on submiting the product we are calling <em>contextValue.addProduct</em> this the function given the value object of the <em>ProductsContext.Provider</em> in the above example. So that state will be updated with the new product.</p><p><br></p><p>Now let us see the  full code of this products example.</p>"}}),H=new b({props:{language:"javascript",uid:"4655ffe1-7423-11ea-be82-abf696c28696",data:"import React, {Component} from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass ProductsModule extends Component {\n    render() {\n        return (\n            <ProductsProvider>\n                <React.Fragment>\n                    <AddProduct/>\n                    <ProductList/>\n                </React.Fragment>\n            </ProductsProvider>\n        );\n    }\n}\n\nconst ProductsContext = React.createContext(null);\n\nclass ProductsProvider extends Component {\n    state = {products: []};\n\n    render() {\n        return (\n            <ProductsContext.Provider value={{\n                state: this.state,\n                addProduct: (newProduct) => this.setState(currentState => {\n                    return {products: [...currentState.products, newProduct]}\n                })\n            }}>\n                {this.props.children}\n            </ProductsContext.Provider>\n        );\n    }\n}\n\nclass AddProduct extends Component {\n    state = {productName: ''};\n\n    render() {\n        return (\n            <ProductsContext.Consumer>\n                {(contextValue) => (\n                    <form onSubmit={(e) => {\n                        e.preventDefault();\n                        contextValue.addProduct({name: this.state.productName, id: new Date().getTime()});\n                        this.setState({productName: ''})\n                    }}>\n                        <input placeholder='Product Name' value={this.state.productName}\n                               onChange={e => this.setState({productName: e.target.value})}/>\n                        <button type='submit'>Add Product</button>\n                    </form>\n                )}\n            </ProductsContext.Consumer>\n        );\n    }\n}\n\nconst ProductItem = React.memo(({product}) => <p>{product.name}</p>);\n\nclass ProductList extends Component {\n    render() {\n        return (\n            <ProductsContext.Consumer>\n                {(contextValue) => (\n                    <React.Fragment>\n                        {contextValue.state.products.map(product => <ProductItem key={product.id} product={product}/>)}\n                    </React.Fragment>\n                )}\n            </ProductsContext.Consumer>\n        );\n    }\n}\n\nexport default ProductsModule;\n\nReactDOM.render(<ProductsModule/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"8-13,25-32,42-54,64-70"}}),V=new C({props:{data:'<p>We know that Context API is designed to share data that can be considered “global” for a tree of React components. So <em>ProductsProvider</em> should be at the root of <em>ProductsModule</em> tree(line no 8).</p><p><br></p><p><em>AddProduct</em> and <em>ProductList</em> are two independent components and no props passed, consumers in it share the state of <em>ProductsProvider</em>.</p><p>\n</p><p>When a product is submited in <em>AddProduct</em>, <em>contextValue.addProduct</em> function is called which updates products state in <em>ProductsProvider</em>, So consumers in both <em>AddProduct</em> and <em>ProductList</em> are re-rendered with new state.</p><p><br></p><p><em>ProductItem</em> uses <a href="/courses/reactJs/reactComponents/reactMemo" target="_blank">React.memo</a> to avaid unnecessory e-renders.</p><p><br></p><p>We had learned What is Context API, How it works and using Context API with class components.</p><p><a href="http://localhost:8080/courses/reactJs/reactHooks/useContextHook" target="_blank">useContextHook</a> chapter explains using Context API with function components.</p>'}});return{c(){e(c.$$.fragment),e(m.$$.fragment),e(i.$$.fragment),e(u.$$.fragment),e($.$$.fragment),e(g.$$.fragment),e(f.$$.fragment),e(h.$$.fragment),e(l.$$.fragment),e(P.$$.fragment),e(v.$$.fragment),e(A.$$.fragment),e(I.$$.fragment),e(R.$$.fragment),e(k.$$.fragment),e(S.$$.fragment),e(j.$$.fragment),e(T.$$.fragment),e(y.$$.fragment),e(N.$$.fragment),e(H.$$.fragment),e(V.$$.fragment)},l(e){t(c.$$.fragment,e),t(m.$$.fragment,e),t(i.$$.fragment,e),t(u.$$.fragment,e),t($.$$.fragment,e),t(g.$$.fragment,e),t(f.$$.fragment,e),t(h.$$.fragment,e),t(l.$$.fragment,e),t(P.$$.fragment,e),t(v.$$.fragment,e),t(A.$$.fragment,e),t(I.$$.fragment,e),t(R.$$.fragment,e),t(k.$$.fragment,e),t(S.$$.fragment,e),t(j.$$.fragment,e),t(T.$$.fragment,e),t(y.$$.fragment,e),t(N.$$.fragment,e),t(H.$$.fragment,e),t(V.$$.fragment,e)},m(e,t){n(c,e,t),n(m,e,t),n(i,e,t),n(u,e,t),n($,e,t),n(g,e,t),n(f,e,t),n(h,e,t),n(l,e,t),n(P,e,t),n(v,e,t),n(A,e,t),n(I,e,t),n(R,e,t),n(k,e,t),n(S,e,t),n(j,e,t),n(T,e,t),n(y,e,t),n(N,e,t),n(H,e,t),n(V,e,t),d=!0},p:a,i(e){d||(r(c.$$.fragment,e),r(m.$$.fragment,e),r(i.$$.fragment,e),r(u.$$.fragment,e),r($.$$.fragment,e),r(g.$$.fragment,e),r(f.$$.fragment,e),r(h.$$.fragment,e),r(l.$$.fragment,e),r(P.$$.fragment,e),r(v.$$.fragment,e),r(A.$$.fragment,e),r(I.$$.fragment,e),r(R.$$.fragment,e),r(k.$$.fragment,e),r(S.$$.fragment,e),r(j.$$.fragment,e),r(T.$$.fragment,e),r(y.$$.fragment,e),r(N.$$.fragment,e),r(H.$$.fragment,e),r(V.$$.fragment,e),d=!0)},o(e){o(c.$$.fragment,e),o(m.$$.fragment,e),o(i.$$.fragment,e),o(u.$$.fragment,e),o($.$$.fragment,e),o(g.$$.fragment,e),o(f.$$.fragment,e),o(h.$$.fragment,e),o(l.$$.fragment,e),o(P.$$.fragment,e),o(v.$$.fragment,e),o(A.$$.fragment,e),o(I.$$.fragment,e),o(R.$$.fragment,e),o(k.$$.fragment,e),o(S.$$.fragment,e),o(j.$$.fragment,e),o(T.$$.fragment,e),o(y.$$.fragment,e),o(N.$$.fragment,e),o(H.$$.fragment,e),o(V.$$.fragment,e),d=!1},d(e){s(c,e),s(m,e),s(i,e),s(u,e),s($,e),s(g,e),s(f,e),s(h,e),s(l,e),s(P,e),s(v,e),s(A,e),s(I,e),s(R,e),s(k,e),s(S,e),s(j,e),s(T,e),s(y,e),s(N,e),s(H,e),s(V,e)}}}function I(a){let h,l,P;const x=new v({props:{$$slots:{default:[A]},$$scope:{ctx:a}}});return{c(){h=p("meta"),l=d(),e(x.$$.fragment),this.h()},l(e){const n=c('[data-svelte="svelte-44rlea"]',document.head);h=m(n,"META",{name:!0,content:!0}),n.forEach(i),l=u(e),t(x.$$.fragment,e),this.h()},h(){document.title="React Context API",$(h,"name","description"),$(h,"content","How to use Context API in react class components.")},m(e,t){g(document.head,h),f(e,l,t),n(x,e,t),P=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),x.$set(n)},i(e){P||(r(x.$$.fragment,e),P=!0)},o(e){o(x.$$.fragment,e),P=!1},d(e){i(h),e&&i(l),s(x,e)}}}export default class extends h{constructor(e){super(),l(this,e,null,I,P,{})}}
