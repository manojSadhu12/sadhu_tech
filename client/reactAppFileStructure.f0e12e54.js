import{l as e,m as t,o as n,n as a,t as r,p as s,q as o,e as i,s as p,C as c,c as l,d,b as f,f as g,h as m,i as u,S as h,j as $,k as b}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as w,P as y,b as k,a as v,N as j,C as x}from"./index.7beba4f9.js";function T(i){let p;const c=new w({props:{data:"React App File Structure",id:"reactAppFileStructure",isBig:"true"}}),l=new y({props:{data:'<p>This chapter explains the React App File Structure created by <a href="/courses/reactJs/reactSetupLocalEnvironment/reactWithWebpack" target="_blank">create-react-app</a>.</p>'}}),d=new k({props:{pic:"/images/da86ed50-f336-11e9-b4ff-ad48fafeab92___252b23e0-0e9d-11ea-8c6f-19598ca3b9f0.jpg",ratio:"7"}}),f=new y({props:{data:'<p><strong>üìÅnode_modules:</strong></p><ul><li>This directory contains all the dependancies and sub dependancies that are used in your project. All the files in this module are generated by <span style="background-color: black;"> npm install </span> command. Content in this folder should not be edited.</li></ul><p><br></p><p>üìÑ<strong>package.json:</strong></p><ul><li>This file holds various meta data about the project like name, description, homepage, keywords, author, contributors, repository, version, dependencies, devDependencies, scripts and more..</li><li>To add a dependency to your project you should add it in <strong>package.json</strong> and run <span style="background-color: black;"> npm install </span> command. Then the code will be downloaded and will be placed in <strong>node_modules</strong> directory.</li></ul><p><br></p><p>Now let us see the generated <strong>package.json</strong> file</p><p><br></p><p><br></p>'}}),g=new v({props:{language:"javascript",uid:"d26ed881-43db-11ea-8e3f-2f826e880ed6",data:'{\n  "name": "myfirstreact",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "react": "^16.12.0",\n    "react-dom": "^16.12.0",\n    "react-scripts": "3.2.0"\n  },\n  "scripts": {\n    "start": "react-scripts start",\n    "build": "react-scripts build",\n    "test": "react-scripts test",\n    "eject": "react-scripts eject"\n  },\n  "eslintConfig": {\n    "extends": "react-app"\n  },\n  "browserslist": {\n    "production": [\n      ">0.2%",\n      "not dead",\n      "not op_mini all"\n    ],\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  }\n}',pic:"",ratio:"4",highlight:""}}),m=new y({props:{data:'<p>Here we can see there are 3 dependencies included (from lines 6 to 8):</p><ul><li><strong>react</strong>: This package contains the functionality to define React components. This package should be used along with a React renderer like&nbsp;<strong>react-dom</strong> for web, <strong>react-native</strong> for native environments<span style="color: rgb(51, 51, 51);">.</span></li><li><strong>react-dom</strong>: This package is a React renderer for web. It takes care of DOM manipulations.</li><li><strong>react-scripts</strong>: This is the package that contains all the build work flow like Webpack, Babel, ESLint, and other amazing projects.</li></ul><p><br></p><p>Here we can see there are 4 scripts included (from lines 11 to 14):</p><ul><li><strong>start</strong>: Use this command during development. It starts the development server, watch for the file changes, compile our code and makes hot reload. As react app runs in development mode react makes app debuggable, shows usefull warnings and errors. It doesnot stores compiled code in any folder, every thing happens in memory.</li><li><strong>build</strong>: Once development is over we have to run this command. It compiles and optimises our code, I does not run a server instead it stores all the optimised code into a folder and you can deploy this folder. </li><li><strong>test</strong>:</li><li><strong>eject</strong>:</li></ul><p><br></p><p>To execute a script we have to run it in the command line using npm with the fallowing syntax.</p><p>npm run { script name }</p>'}}),u=new j({props:{data:"<p>Only start script can be executed with or without run keyword.</p>"}}),h=new v({props:{language:"html",uid:"53331151-18be-11ea-a5cc-f3f189559558",data:"npm start",pic:"",ratio:"4",highlight:""}}),$=new v({props:{language:"html",uid:"b0eebbf1-18be-11ea-a5cc-f3f189559558",data:"npm run start",pic:"",ratio:"4",highlight:""}}),b=new v({props:{language:"html",uid:"affcbad1-18be-11ea-a5cc-f3f189559558",data:"npm run build",pic:"",ratio:"4",highlight:""}}),x=new v({props:{language:"html",uid:"af22d591-18be-11ea-a5cc-f3f189559558",data:"npm run test",pic:"",ratio:"4",highlight:""}}),T=new v({props:{language:"html",uid:"ae0e5851-18be-11ea-a5cc-f3f189559558",data:"npm run eject",pic:"",ratio:"4",highlight:""}}),A=new y({props:{data:'<p><strong>üìÅpublic: </strong>This is the root folder that will be served by the webserver.</p><p>üìÑ<strong>index.html:</strong> This is the only html page in the entire project. And we will never add another html page. The code we write will be in the <strong>src </strong>folder and the scripts we write will be injected by the build work flow. If you want to add some CDN\'s or css links then you can edit this index.html file. If your want multipage project then create individual projects with <a href="/courses/reactJs/reactSetupLocalEnvironment/reactWithWebpack" target="_blank">create-react-app</a>. But don`t add another html file. If you want to use multiple html files in a single project then you have to create your own work flow.</p><p><br></p><p><strong>üìÅsrc: </strong>This is the folder where we write our code. The first file to be executed is <strong>index.js.</strong></p><p><strong><span class="ql-cursor">\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff</span></strong></p><h3><strong>index.js:</strong></h3>'}}),I=new v({props:{language:"javascript",uid:"10edf451-18c7-11ea-a5cc-f3f189559558",data:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();",pic:"",ratio:"4",highlight:"4, 7"}}),R=new y({props:{data:'<p>Line number 4 is importing App compoment from App.js file, but <span style="background-color: black;"> .js </span> writing extensions is optional because it is automatically added by the build work flow.</p><p><br></p><p>Observe the line number 7 in the above code.</p><p>This gets element with id <span style="background-color: black;"> #root </span> from <strong>index.html </strong>file and renders <span style="background-color: black;"> App </span> component.</p><p><br></p><ul><li>All the css files this folder are scoped golbally. But its good to put global stypes in index.css and component specific styles in css file named with the component name.</li><li>Test.js files are ment for unit testing.</li></ul><p><br></p><p>This is the default project structure that <a href="/courses/reactJs/reactSetupLocalEnvironment/reactWithWebpack" target="_blank">create-react-app</a> gives for us.</p>'}});return{c(){e(c.$$.fragment),e(l.$$.fragment),e(d.$$.fragment),e(f.$$.fragment),e(g.$$.fragment),e(m.$$.fragment),e(u.$$.fragment),e(h.$$.fragment),e($.$$.fragment),e(b.$$.fragment),e(x.$$.fragment),e(T.$$.fragment),e(A.$$.fragment),e(I.$$.fragment),e(R.$$.fragment)},l(e){t(c.$$.fragment,e),t(l.$$.fragment,e),t(d.$$.fragment,e),t(f.$$.fragment,e),t(g.$$.fragment,e),t(m.$$.fragment,e),t(u.$$.fragment,e),t(h.$$.fragment,e),t($.$$.fragment,e),t(b.$$.fragment,e),t(x.$$.fragment,e),t(T.$$.fragment,e),t(A.$$.fragment,e),t(I.$$.fragment,e),t(R.$$.fragment,e)},m(e,t){n(c,e,t),n(l,e,t),n(d,e,t),n(f,e,t),n(g,e,t),n(m,e,t),n(u,e,t),n(h,e,t),n($,e,t),n(b,e,t),n(x,e,t),n(T,e,t),n(A,e,t),n(I,e,t),n(R,e,t),p=!0},p:a,i(e){p||(r(c.$$.fragment,e),r(l.$$.fragment,e),r(d.$$.fragment,e),r(f.$$.fragment,e),r(g.$$.fragment,e),r(m.$$.fragment,e),r(u.$$.fragment,e),r(h.$$.fragment,e),r($.$$.fragment,e),r(b.$$.fragment,e),r(x.$$.fragment,e),r(T.$$.fragment,e),r(A.$$.fragment,e),r(I.$$.fragment,e),r(R.$$.fragment,e),p=!0)},o(e){s(c.$$.fragment,e),s(l.$$.fragment,e),s(d.$$.fragment,e),s(f.$$.fragment,e),s(g.$$.fragment,e),s(m.$$.fragment,e),s(u.$$.fragment,e),s(h.$$.fragment,e),s($.$$.fragment,e),s(b.$$.fragment,e),s(x.$$.fragment,e),s(T.$$.fragment,e),s(A.$$.fragment,e),s(I.$$.fragment,e),s(R.$$.fragment,e),p=!1},d(e){o(c,e),o(l,e),o(d,e),o(f,e),o(g,e),o(m,e),o(u,e),o(h,e),o($,e),o(b,e),o(x,e),o(T,e),o(A,e),o(I,e),o(R,e)}}}function A(a){let h,$,b;const w=new x({props:{$$slots:{default:[T]},$$scope:{ctx:a}}});return{c(){h=i("meta"),$=p(),e(w.$$.fragment),this.h()},l(e){const n=c('[data-svelte="svelte-189sf2j"]',document.head);h=l(n,"META",{name:!0,content:!0}),n.forEach(d),$=f(e),t(w.$$.fragment,e),this.h()},h(){document.title="React App File Structure",g(h,"name","description"),g(h,"content","React App File Structure")},m(e,t){m(document.head,h),u(e,$,t),n(w,e,t),b=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),w.$set(n)},i(e){b||(r(w.$$.fragment,e),b=!0)},o(e){s(w.$$.fragment,e),b=!1},d(e){d(h),e&&d($),o(w,e)}}}export default class extends h{constructor(e){super(),$(this,e,null,A,b,{})}}
