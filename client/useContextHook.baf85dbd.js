import{l as t,m as e,o,n,t as r,p as a,q as c,e as s,s as d,C as u,c as m,d as p,b as g,f as l,h as i,i as $,S as f,j as b,k as P}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as h,P as x,a as C,C as w}from"./index.7beba4f9.js";function k(s){let d;const u=new h({props:{data:"useContext Hook",id:"useContextHook",isBig:"true"}}),m=new x({props:{data:'<p>This chapter explains using Context API with function components.</p><p>To learn What is Context API, How it works and using Context API with class components goto <a href="/courses/reactJs/reactComponents/reactContextAPI" target="_blank">React Context API</a> chapter.</p><p>This chapter assumes that you are familiar with <a href="/courses/reactJs/reactComponents/reactContextAPI" target="_blank">React Context API with class components</a>.</p>'}}),p=new h({props:{data:"Context Provider in function Component",id:"contextProviderInFunctionComponent"}}),g=new C({props:{language:"javascript",uid:"12425711-7498-11ea-a250-c3bf1d9f7091",data:"const ProductsProvider = (props) => {\n    const [products, setProducts] = useState([]);\n    return (\n        <ProductsContext.Provider value={{\n            products,\n            addProduct: (newProduct) => setProducts(currentProducts => [...currentProducts, newProduct])\n        }}>\n            {props.children}\n        </ProductsContext.Provider>\n    );\n};",pic:"",ratio:"4",highlight:"4-9"}}),l=new x({props:{data:'<p>This is an example of <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> Context.Provider </em>. Working with provider is exactly same in as how we do in class component.</p>'}}),i=new h({props:{data:"Context Consumer in function component with useContext",id:"contextConsumerInFunctionComponentWithUseContext"}}),$=new C({props:{language:"javascript",uid:"88dbab11-7498-11ea-a250-c3bf1d9f7091",data:"const AddProduct = () => {\n    const [productName, setProductName] = useState('');\n    const contextValue = useContext(ProductsContext);\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            contextValue.addProduct({name: productName, id: new Date().getTime()});\n            setProductName('')\n        }}>\n            <input placeholder='Product Name' value={productName}\n                   onChange={e => setProductName(e.target.value)}/>\n            <button type='submit'>Add Product</button>\n        </form>\n    );\n};",pic:"",ratio:"4",highlight:"3"}}),f=new x({props:{data:'<p>In class components we get <strong>contextValue</strong> from <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> Context.Consumer </em> children prop function. But in function component <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useContext </em> gives the <strong>contextValue</strong>. And rest all is same.</p><p><br></p><p>Now let us see the full example Context api in function components.</p>'}}),b=new C({props:{language:"javascript",uid:"ebbf8671-7498-11ea-a250-c3bf1d9f7091",data:"import React, {Component, useContext, useState} from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nclass ProductsModule extends Component {\n    render() {\n        return (\n            <ProductsProvider>\n                <React.Fragment>\n                    <AddProduct/>\n                    <ProductList/>\n                </React.Fragment>\n            </ProductsProvider>\n        );\n    }\n}\n\nconst ProductsContext = React.createContext(null);\n\nconst ProductsProvider = (props) => {\n    const [products, setProducts] = useState([]);\n    return (\n        <ProductsContext.Provider value={{\n            products,\n            addProduct: (newProduct) => setProducts(currentProducts => [...currentProducts, newProduct])\n        }}>\n            {props.children}\n        </ProductsContext.Provider>\n    );\n};\n\nconst AddProduct = () => {\n    const [productName, setProductName] = useState('');\n    const contextValue = useContext(ProductsContext);\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            contextValue.addProduct({name: productName, id: new Date().getTime()});\n            setProductName('')\n        }}>\n            <input placeholder='Product Name' value={productName}\n                   onChange={e => setProductName(e.target.value)}/>\n            <button type='submit'>Add Product</button>\n        </form>\n    );\n};\n\nconst ProductItem = React.memo(({product}) => <p>{product.name}</p>);\n\nconst ProductList = () => {\n    const contextValue = useContext(ProductsContext);\n\n    return (\n        <React.Fragment>\n            {contextValue.products.map(product => <ProductItem key={product.id} product={product}/>)}\n        </React.Fragment>\n    );\n};\n\nexport default ProductsModule;\n\nReactDOM.render(<ProductsModule/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"8-13,23-28,34,51"}}),P=new x({props:{data:'<p>We know that Context API is designed to share data that can be considered “global” for a tree of React components. So <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);">ProductsProvider</em><span style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> </span> should be at the root of <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> ProductsModule </em> tree(line no 8).</p><p><br></p><p><em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> AddProduct </em> and <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> ProductList </em> are two independent components and no props passed, from <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useContext </em>(line no: 34,51)they share the state of <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">ProductsProvider</em><span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> </span>.</p><p><br></p><p>When a product is submited in <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> AddProduct </em>, <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> contextValue.addProduct </em> function is called which updates products state in <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">ProductsProvider</em><span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> </span>, So both <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> AddProduct </em> and <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> ProductList </em> are re-rendered with new state.</p><p><br></p><p><em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> ProductItem </em> uses <a href="http://localhost:8080/courses/reactJs/reactComponents/reactMemo" target="_blank">React.memo</a> to avaid unnecessory e-renders.</p><p><br></p><p>We had learned using Context API with function components.</p><p>To learn What is Context API, How it works and using Context API with class components goto <a href="http://localhost:8080/courses/reactJs/reactComponents/reactContextAPI" target="_blank">React Context API</a> chapter.</p>'}});return{c(){t(u.$$.fragment),t(m.$$.fragment),t(p.$$.fragment),t(g.$$.fragment),t(l.$$.fragment),t(i.$$.fragment),t($.$$.fragment),t(f.$$.fragment),t(b.$$.fragment),t(P.$$.fragment)},l(t){e(u.$$.fragment,t),e(m.$$.fragment,t),e(p.$$.fragment,t),e(g.$$.fragment,t),e(l.$$.fragment,t),e(i.$$.fragment,t),e($.$$.fragment,t),e(f.$$.fragment,t),e(b.$$.fragment,t),e(P.$$.fragment,t)},m(t,e){o(u,t,e),o(m,t,e),o(p,t,e),o(g,t,e),o(l,t,e),o(i,t,e),o($,t,e),o(f,t,e),o(b,t,e),o(P,t,e),d=!0},p:n,i(t){d||(r(u.$$.fragment,t),r(m.$$.fragment,t),r(p.$$.fragment,t),r(g.$$.fragment,t),r(l.$$.fragment,t),r(i.$$.fragment,t),r($.$$.fragment,t),r(f.$$.fragment,t),r(b.$$.fragment,t),r(P.$$.fragment,t),d=!0)},o(t){a(u.$$.fragment,t),a(m.$$.fragment,t),a(p.$$.fragment,t),a(g.$$.fragment,t),a(l.$$.fragment,t),a(i.$$.fragment,t),a($.$$.fragment,t),a(f.$$.fragment,t),a(b.$$.fragment,t),a(P.$$.fragment,t),d=!1},d(t){c(u,t),c(m,t),c(p,t),c(g,t),c(l,t),c(i,t),c($,t),c(f,t),c(b,t),c(P,t)}}}function v(n){let f,b,P;const h=new w({props:{$$slots:{default:[k]},$$scope:{ctx:n}}});return{c(){f=s("meta"),b=d(),t(h.$$.fragment),this.h()},l(t){const o=u('[data-svelte="svelte-29u6kb"]',document.head);f=m(o,"META",{name:!0,content:!0}),o.forEach(p),b=g(t),e(h.$$.fragment,t),this.h()},h(){document.title="useContext Hook",l(f,"name","description"),l(f,"content","useContext Hook")},m(t,e){i(document.head,f),$(t,b,e),o(h,t,e),P=!0},p(t,[e]){const o={};1&e&&(o.$$scope={dirty:e,ctx:t}),h.$set(o)},i(t){P||(r(h.$$.fragment,t),P=!0)},o(t){a(h.$$.fragment,t),P=!1},d(t){p(f),t&&p(b),c(h,t)}}}export default class extends f{constructor(t){super(),b(this,t,null,v,P,{})}}
