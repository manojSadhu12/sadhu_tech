import{l as e,m as n,o as t,n as a,t as r,p as o,q as c,e as s,s as f,C as m,c as i,d as p,b as u,f as $,h as g,i as d,S as l,j as h,k as E}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as b,P as v,a as w,N as y,C as R}from"./index.7beba4f9.js";function x(s){let f;const m=new b({props:{data:"useEffect",id:"useEffect",isBig:"true"}}),i=new v({props:{data:"<p>useEffect can cause side-effects and also is a replacement for componentDidMount, componentDidUpdate and componentWillUnmount in function component.</p>"}}),p=new w({props:{language:"javascript",uid:"01f51461-5607-11ea-8985-87230e28999c",data:"/**\n* Accepts a function that contains imperative, possibly effectful code.\n*\n* @param effect Imperative function that can return a cleanup function or void.\n* @param deps If present, effect will only activate if the values in the list change.\n*/\n\nuseEffect(() => {\n    //effect code\n    return () => {\n        //cleanup code\n    };\n}, [\n    //dependencies list\n])",pic:"",ratio:"4",highlight:""}}),u=new v({props:{data:"<p>We can conditionally run useEffect code like</p><ul><li>Run only once (like componentDidMount)</li><li>Run based on changes in dependent state (like componentDidUpdate)</li><li>Run for every render (like componentDidMount + componentDidUpdate)</li><li>Run for clean up (like componentWillUnmount)</li></ul>"}}),$=new b({props:{data:"useEffect for every render",id:"useEffectForEveryRender"}}),g=new w({props:{language:"javascript",uid:"c2782d61-5636-11ea-8985-87230e28999c",data:"import React, {useState, useEffect} from 'react';\nimport ReactDOM from \"react-dom\";\n\nexport const Counter = (props) => {\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        console.log(\"Count: \", count)\n    })\n\n    return (\n        <React.Fragment>\n            <button onClick={() => setCount(currentCount => {return currentCount + 1})}>Increase count</button>\n        </React.Fragment>\n    )\n};\n\nReactDOM.render(<Counter/>, document.getElementById('root'));",pic:"",ratio:"8",highlight:"8"}}),d=new v({props:{data:'<p>In the above example the log at line 8 executes for every render. When <span style="background-color: black;"> Increase count </span> button is clicked we are changing state so render is triggered and useEffect code gets executed.</p>'}}),l=new y({props:{data:"<p>useEffect executes for every render if callback function is passed and dependency list is not passed.</p>"}}),h=new b({props:{data:"Execute useEffect conditionally",id:"executeUseEffectConditionally"}}),E=new w({props:{language:"javascript",uid:"c36efe91-5638-11ea-8985-87230e28999c",data:"import React, {useState, useEffect} from 'react';\nimport ReactDOM from \"react-dom\";\n\nexport const Form = (props) => {\n    const [name, setName] = useState(\"\");\n    const [age, setAge] = useState(0);\n\n    useEffect(() => {\n        console.log(\"Name: \", name)\n    }, [name])\n\n    useEffect(() => {\n        console.log(\"Age: \", age)\n    }, [age])\n\n    return (\n        <React.Fragment>\n            <input type='text' placeholder='Name' value={name} onChange={e=> setName(e.target.value)}/>\n            <input type='number' placeholder='Age' value={age} onChange={e=> setAge(e.target.value)}/>\n        </React.Fragment>\n    )\n};\n\nReactDOM.render(<Form/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"8-10, 12-15"}}),R=new v({props:{data:'<p>In the above example we have written 2 <span style="background-color: black;"> useEffect() </span>. Both of these executes when component mounts and when their dependencies list is changed.</p><p><br></p><p>When name is changed only name useEffect is executed and when age is changed only age useEffect is executed.</p>'}}),x=new b({props:{data:"Execute useEffect only once like componentDidMount",id:"executeUseEffectOnlyOnceLikeComponentDidMount"}}),k=new w({props:{language:"javascript",uid:"8ab84551-5aa4-11ea-b683-5f20b714c73b",data:"import React, {useState, useEffect} from 'react';\nimport ReactDOM from \"react-dom\";\n\nexport const Form = (props) => {\n    const [name, setName] = useState(\"\");\n    const [age, setAge] = useState(0);\n\n    useEffect(() => {\n        console.log(\"Name: \", name)\n        console.log(\"Age: \", age)\n    }, [])\n\n    return (\n        <React.Fragment>\n            <input type='text' placeholder='Name' value={name} onChange={e=> setName(e.target.value)}/>\n            <input type='number' placeholder='Age' value={age} onChange={e=> setAge(e.target.value)}/>\n        </React.Fragment>\n    )\n};\n\nReactDOM.render(<Form/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"11"}}),C=new v({props:{data:"<p>Just by passing [] as dependency list to useEffect it executes only at the first render like componentDidMount.</p>"}}),D=new b({props:{data:"useEffect for cleanup like componentWillUnmount",id:"useEffectForCleanupLikeComponentWillUnmount"}}),M=new w({props:{language:"javascript",uid:"a2dc4631-5aa5-11ea-b683-5f20b714c73b",data:'useEffect(() => {\n    window.addEventListener("resize", handleResize);\n    return () => {\n        //cleanup code goes here\n        window.addEventListener("resize", handleResize);\n    }\n}, [])',pic:"",ratio:"4",highlight:""}}),j=new v({props:{data:'<p>The function we pass to the <span style="background-color: black;"> useEffect </span> should return void or another function. This returned function is called when component is unmounted.</p>'}});return{c(){e(m.$$.fragment),e(i.$$.fragment),e(p.$$.fragment),e(u.$$.fragment),e($.$$.fragment),e(g.$$.fragment),e(d.$$.fragment),e(l.$$.fragment),e(h.$$.fragment),e(E.$$.fragment),e(R.$$.fragment),e(x.$$.fragment),e(k.$$.fragment),e(C.$$.fragment),e(D.$$.fragment),e(M.$$.fragment),e(j.$$.fragment)},l(e){n(m.$$.fragment,e),n(i.$$.fragment,e),n(p.$$.fragment,e),n(u.$$.fragment,e),n($.$$.fragment,e),n(g.$$.fragment,e),n(d.$$.fragment,e),n(l.$$.fragment,e),n(h.$$.fragment,e),n(E.$$.fragment,e),n(R.$$.fragment,e),n(x.$$.fragment,e),n(k.$$.fragment,e),n(C.$$.fragment,e),n(D.$$.fragment,e),n(M.$$.fragment,e),n(j.$$.fragment,e)},m(e,n){t(m,e,n),t(i,e,n),t(p,e,n),t(u,e,n),t($,e,n),t(g,e,n),t(d,e,n),t(l,e,n),t(h,e,n),t(E,e,n),t(R,e,n),t(x,e,n),t(k,e,n),t(C,e,n),t(D,e,n),t(M,e,n),t(j,e,n),f=!0},p:a,i(e){f||(r(m.$$.fragment,e),r(i.$$.fragment,e),r(p.$$.fragment,e),r(u.$$.fragment,e),r($.$$.fragment,e),r(g.$$.fragment,e),r(d.$$.fragment,e),r(l.$$.fragment,e),r(h.$$.fragment,e),r(E.$$.fragment,e),r(R.$$.fragment,e),r(x.$$.fragment,e),r(k.$$.fragment,e),r(C.$$.fragment,e),r(D.$$.fragment,e),r(M.$$.fragment,e),r(j.$$.fragment,e),f=!0)},o(e){o(m.$$.fragment,e),o(i.$$.fragment,e),o(p.$$.fragment,e),o(u.$$.fragment,e),o($.$$.fragment,e),o(g.$$.fragment,e),o(d.$$.fragment,e),o(l.$$.fragment,e),o(h.$$.fragment,e),o(E.$$.fragment,e),o(R.$$.fragment,e),o(x.$$.fragment,e),o(k.$$.fragment,e),o(C.$$.fragment,e),o(D.$$.fragment,e),o(M.$$.fragment,e),o(j.$$.fragment,e),f=!1},d(e){c(m,e),c(i,e),c(p,e),c(u,e),c($,e),c(g,e),c(d,e),c(l,e),c(h,e),c(E,e),c(R,e),c(x,e),c(k,e),c(C,e),c(D,e),c(M,e),c(j,e)}}}function k(a){let l,h,E;const b=new R({props:{$$slots:{default:[x]},$$scope:{ctx:a}}});return{c(){l=s("meta"),h=f(),e(b.$$.fragment),this.h()},l(e){const t=m('[data-svelte="svelte-6a5sq7"]',document.head);l=i(t,"META",{name:!0,content:!0}),t.forEach(p),h=u(e),n(b.$$.fragment,e),this.h()},h(){document.title="React useEffect",$(l,"name","description"),$(l,"content","React useEffect")},m(e,n){g(document.head,l),d(e,h,n),t(b,e,n),E=!0},p(e,[n]){const t={};1&n&&(t.$$scope={dirty:n,ctx:e}),b.$set(t)},i(e){E||(r(b.$$.fragment,e),E=!0)},o(e){o(b.$$.fragment,e),E=!1},d(e){p(l),e&&p(h),c(b,e)}}}export default class extends l{constructor(e){super(),h(this,e,null,k,E,{})}}
