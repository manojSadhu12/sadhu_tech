import{l as e,m as t,o as r,n as a,t as n,p as o,q as c,e as s,s as d,C as u,c as i,d as p,b as m,f as g,h as l,i as $,S as f,j as h,k as b}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as w,P as R,a as P,N as y,C as D}from"./index.7beba4f9.js";function k(s){let d;const u=new w({props:{data:"useReducer",id:"useReducer",isBig:"true"}}),i=new R({props:{data:'<p><em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useReducer </em> is an alternative to <a href="/courses/reactJs/reactHooks/useStateHook" target="_blank">useState</a>. So we can do state managment with <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useReducer </em></p>'}}),p=new P({props:{language:"javascript",uid:"ee11d4e1-74da-11ea-a250-c3bf1d9f7091",data:"/**\n * @param1 reducer: This is function that accepts state and action.\n * @param2 initialArg: This the initial state.\n * @param3 init: This is an optional function where it takes initialArg and returns a new state.\n * @return an array pair, current state and dispatch is a function used to dispatch an action and update state.\n */\nconst [state, dispatch] = useReducer(reducer, initialArg, init);",pic:"",ratio:"4",highlight:""}}),m=new P({props:{language:"javascript",uid:"a6c00291-74dc-11ea-a250-c3bf1d9f7091",data:"import React, {useReducer} from 'react';\nconst [products, dispatch] = useReducer(productsReducer, []);",pic:"",ratio:"4",highlight:""}}),g=new R({props:{data:'<p>This is how we write <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useReducer </em></p><p>Now let us see reducer and dispatch functions</p>'}}),l=new w({props:{data:"Reducer",id:"reducer"}}),$=new P({props:{language:"javascript",uid:"e82816f1-74dc-11ea-a250-c3bf1d9f7091",data:"/**\n * @param1 current state\n * @param2 action: is can be of any type(i.e number, string, object),\n *     this tells the reducer based on what action state should be modified.\n * @return newState\n */\nnewState = reducer(state, action);",pic:"",ratio:"4",highlight:""}}),f=new P({props:{language:"javascript",uid:"68be5541-74dd-11ea-a250-c3bf1d9f7091",data:"const ADD_PRODUCT = 'addProduct';\nconst DELETE_PRODUCT = 'deleteProduct';\n\nconst productsReducer = (products, action) => {\n    switch (action.type) {\n        case ADD_PRODUCT:\n            return [...products, action.newProduct];\n        case DELETE_PRODUCT:\n            return products.filter(product => product.id !== action.productId);\n        default:\n            return products\n    }\n};",pic:"",ratio:"4",highlight:""}}),h=new R({props:{data:'<p>This is an example how reducer generally works.</p><p><em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> products </em> is our state.</p><p><em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> action </em> is a json object which holds type and other properties based on situations.</p><p>Based on type property of action, reducer is adding or removing a product from the state and returning a new state.</p><p><br></p><p>We never call a reducer, React calls the reducer when we call the dispatch function with the action needed. </p>'}}),b=new w({props:{data:"Dispatch",id:"dispatch"}}),D=new P({props:{language:"javascript",uid:"56fb6861-74de-11ea-a250-c3bf1d9f7091",data:"/**\n * @param action: React passes this to the reducer\n */\ndispatch(action);",pic:"",ratio:"4",highlight:""}}),k=new R({props:{data:'<p>When we call the <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> dispatch function </em> with an action <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> React call the reducer with current state and the action </em> that we have passed.</p><p><br></p><p><em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> dispatch function </em> can be passed as prop to child components.</p>'}}),T=new P({props:{language:"javascript",uid:"83ec13b1-74de-11ea-a250-c3bf1d9f7091",data:"import React, {useReducer, useState} from 'react';\nimport ReactDOM from 'react-dom'\nimport './App.css';\n\nconst ADD_PRODUCT = 'addProduct';\nconst DELETE_PRODUCT = 'deleteProduct';\n\nconst productsReducer = (products, action) => {\n    switch (action.type) {\n        case ADD_PRODUCT:\n            return [...products, action.newProduct];\n        case DELETE_PRODUCT:\n            return products.filter(product => product.id !== action.productId);\n        default:\n            return products\n    }\n};\n\nconst ProductsModule = () => {\n    const [products, dispatch] = useReducer(productsReducer, []);\n    return (\n        <React.Fragment>\n            <AddProduct dispatch={dispatch}/>\n            <ProductList products={products} dispatch={dispatch}/>\n        </React.Fragment>\n    );\n};\n\nconst AddProduct = ({dispatch}) => {\n    const [productName, setProductName] = useState('');\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            dispatch({type: ADD_PRODUCT, newProduct: {name: productName, id: new Date().getTime()}});\n            setProductName('')\n        }}>\n            <input placeholder='Product Name' value={productName}\n                   onChange={e => setProductName(e.target.value)}/>\n            <button type='submit'>Add Product</button>\n        </form>\n    );\n};\n\nconst ProductItem = React.memo(({product, dispatch}) =>\n    <div>\n        <span> {product.name}</span>\n        <button onClick={() => dispatch({type: DELETE_PRODUCT, productId: product.id})}>delete</button>\n    </div>);\n\nconst ProductList = ({products, dispatch}) =>\n    <React.Fragment>\n        {products.map(product => <ProductItem key={product.id} product={product} dispatch={dispatch}/>)}\n    </React.Fragment>;\n\nexport default ProductsModule;\n\nReactDOM.render(<ProductsModule/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"1,8-17,23,24,34,47,52"}}),v=new R({props:{data:'<p>This an example where products can be added and removed with <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useReducer </em></p><p>At lines 23,24 <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> dispatch </em> is passed as prop to <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> AddProduct </em> and <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> ProductList </em> components.</p><p><br></p><p>At line 34 on form submit <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> AddProduct </em> calles the dispatch function with <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> {type: ADD_PRODUCT, newProduct: {name: productName, id: new Date().getTime()}} </em>, so <em style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> productsReducer </em> will be triggred by react passing this action, so at line 11 reducer returns new state with our new product added. So <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> AddProduct </em> and <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> ProductList </em> components will be re-rendered with the new state.</p><p><br></p><p>And the same flow goes for deleting a product.</p>'}}),A=new y({props:{data:'<p>All the above work ca also be done with <a href="/courses/reactJs/reactHooks/useStateHook" target="_blank">useState</a>. But if we have complicated state(i.e state is having many properties and all properties are dependent) then <em style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useReducer </em> is handy for state managment. Because we can out source the reducer and maintain a cleaner code.</p>'}});return{c(){e(u.$$.fragment),e(i.$$.fragment),e(p.$$.fragment),e(m.$$.fragment),e(g.$$.fragment),e(l.$$.fragment),e($.$$.fragment),e(f.$$.fragment),e(h.$$.fragment),e(b.$$.fragment),e(D.$$.fragment),e(k.$$.fragment),e(T.$$.fragment),e(v.$$.fragment),e(A.$$.fragment)},l(e){t(u.$$.fragment,e),t(i.$$.fragment,e),t(p.$$.fragment,e),t(m.$$.fragment,e),t(g.$$.fragment,e),t(l.$$.fragment,e),t($.$$.fragment,e),t(f.$$.fragment,e),t(h.$$.fragment,e),t(b.$$.fragment,e),t(D.$$.fragment,e),t(k.$$.fragment,e),t(T.$$.fragment,e),t(v.$$.fragment,e),t(A.$$.fragment,e)},m(e,t){r(u,e,t),r(i,e,t),r(p,e,t),r(m,e,t),r(g,e,t),r(l,e,t),r($,e,t),r(f,e,t),r(h,e,t),r(b,e,t),r(D,e,t),r(k,e,t),r(T,e,t),r(v,e,t),r(A,e,t),d=!0},p:a,i(e){d||(n(u.$$.fragment,e),n(i.$$.fragment,e),n(p.$$.fragment,e),n(m.$$.fragment,e),n(g.$$.fragment,e),n(l.$$.fragment,e),n($.$$.fragment,e),n(f.$$.fragment,e),n(h.$$.fragment,e),n(b.$$.fragment,e),n(D.$$.fragment,e),n(k.$$.fragment,e),n(T.$$.fragment,e),n(v.$$.fragment,e),n(A.$$.fragment,e),d=!0)},o(e){o(u.$$.fragment,e),o(i.$$.fragment,e),o(p.$$.fragment,e),o(m.$$.fragment,e),o(g.$$.fragment,e),o(l.$$.fragment,e),o($.$$.fragment,e),o(f.$$.fragment,e),o(h.$$.fragment,e),o(b.$$.fragment,e),o(D.$$.fragment,e),o(k.$$.fragment,e),o(T.$$.fragment,e),o(v.$$.fragment,e),o(A.$$.fragment,e),d=!1},d(e){c(u,e),c(i,e),c(p,e),c(m,e),c(g,e),c(l,e),c($,e),c(f,e),c(h,e),c(b,e),c(D,e),c(k,e),c(T,e),c(v,e),c(A,e)}}}function T(a){let f,h,b;const w=new D({props:{$$slots:{default:[k]},$$scope:{ctx:a}}});return{c(){f=s("meta"),h=d(),e(w.$$.fragment),this.h()},l(e){const r=u('[data-svelte="svelte-17kyloj"]',document.head);f=i(r,"META",{name:!0,content:!0}),r.forEach(p),h=m(e),t(w.$$.fragment,e),this.h()},h(){document.title="React useReducer",g(f,"name","description"),g(f,"content","React useReducer")},m(e,t){l(document.head,f),$(e,h,t),r(w,e,t),b=!0},p(e,[t]){const r={};1&t&&(r.$$scope={dirty:t,ctx:e}),w.$set(r)},i(e){b||(n(w.$$.fragment,e),b=!0)},o(e){o(w.$$.fragment,e),b=!1},d(e){p(f),e&&p(h),c(w,e)}}}export default class extends f{constructor(e){super(),h(this,e,null,T,b,{})}}
