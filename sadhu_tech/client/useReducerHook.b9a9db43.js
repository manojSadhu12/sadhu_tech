import{l as e,m as t,o as a,n,t as r,p as c,q as s,e as d,s as o,C as i,c as p,d as u,b as m,f as $,h as f,i as g,S as h,j as l,k as w}from"./client.f707559f.js";import"./Icon.b3087117.js";import"./Button.46d81a0e.js";import"./Image.a80d16de.js";import"./stores.ec09ff7a.js";import{H as R,P as b,a as P,N as D,C as T}from"./index.b8f1b6e6.js";function v(d){let o;const i=new R({props:{data:"useReducer",id:"useReducer",isBig:"true"}}),p=new b({props:{data:'<p><em>useReducer</em> is an alternative to <a href="/courses/reactJs/reactHooks/useStateHook" target="_blank">useState</a>. So we can do state managment with <em>useReducer</em></p>'}}),u=new P({props:{language:"javascript",uid:"ee11d4e1-74da-11ea-a250-c3bf1d9f7091",data:"/**\n * @param1 reducer: This is function that accepts state and action.\n * @param2 initialArg: This the initial state.\n * @param3 init: This is an optional function where it takes initialArg and returns a new state.\n * @return an array pair, current state and dispatch is a function used to dispatch an action and update state.\n */\nconst [state, dispatch] = useReducer(reducer, initialArg, init);",pic:"",ratio:"4",highlight:""}}),m=new P({props:{language:"javascript",uid:"a6c00291-74dc-11ea-a250-c3bf1d9f7091",data:"import React, {useReducer} from 'react';\nconst [products, dispatch] = useReducer(productsReducer, []);",pic:"",ratio:"4",highlight:""}}),$=new b({props:{data:"<p>This is how we write <em>useReducer</em></p><p>Now let us see reducer and dispatch functions</p>"}}),f=new R({props:{data:"Reducer",id:"reducer"}}),g=new P({props:{language:"javascript",uid:"e82816f1-74dc-11ea-a250-c3bf1d9f7091",data:"/**\n * @param1 current state\n * @param2 action: is can be of any type(i.e number, string, object),\n *     this tells the reducer based on what action state should be modified.\n * @return newState\n */\nnewState = reducer(state, action);",pic:"",ratio:"4",highlight:""}}),h=new P({props:{language:"javascript",uid:"68be5541-74dd-11ea-a250-c3bf1d9f7091",data:"const ADD_PRODUCT = 'addProduct';\nconst DELETE_PRODUCT = 'deleteProduct';\n\nconst productsReducer = (products, action) => {\n    switch (action.type) {\n        case ADD_PRODUCT:\n            return [...products, action.newProduct];\n        case DELETE_PRODUCT:\n            return products.filter(product => product.id !== action.productId);\n        default:\n            return products\n    }\n};",pic:"",ratio:"4",highlight:""}}),l=new b({props:{data:"<p>This is an example how reducer generally works.</p><p><em>products</em> is our state.</p><p><em>action</em> is a json object which holds type and other properties based on situations.</p><p>Based on type property of action, reducer is adding or removing a product from the state and returning a new state.</p><p><br></p><p>We never call a reducer, React calls the reducer when we call the dispatch function with the action needed. </p>"}}),w=new R({props:{data:"Dispatch",id:"dispatch"}}),T=new P({props:{language:"javascript",uid:"56fb6861-74de-11ea-a250-c3bf1d9f7091",data:"/**\n * @param action: React passes this to the reducer\n */\ndispatch(action);",pic:"",ratio:"4",highlight:""}}),v=new b({props:{data:"<p>When we call the <em>dispatch function</em> with an action <em>React call the reducer with current state and the action</em> that we have passed.</p><p><br></p><p><em>dispatch function</em> can be passed as prop to child components.</p>"}}),A=new P({props:{language:"javascript",uid:"83ec13b1-74de-11ea-a250-c3bf1d9f7091",data:"import React, {useReducer, useState} from 'react';\nimport ReactDOM from 'react-dom'\nimport './App.css';\n\nconst ADD_PRODUCT = 'addProduct';\nconst DELETE_PRODUCT = 'deleteProduct';\n\nconst productsReducer = (products, action) => {\n    switch (action.type) {\n        case ADD_PRODUCT:\n            return [...products, action.newProduct];\n        case DELETE_PRODUCT:\n            return products.filter(product => product.id !== action.productId);\n        default:\n            return products\n    }\n};\n\nconst ProductsModule = () => {\n    const [products, dispatch] = useReducer(productsReducer, []);\n    return (\n        <React.Fragment>\n            <AddProduct dispatch={dispatch}/>\n            <ProductList products={products} dispatch={dispatch}/>\n        </React.Fragment>\n    );\n};\n\nconst AddProduct = ({dispatch}) => {\n    const [productName, setProductName] = useState('');\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            dispatch({type: ADD_PRODUCT, newProduct: {name: productName, id: new Date().getTime()}});\n            setProductName('')\n        }}>\n            <input placeholder='Product Name' value={productName}\n                   onChange={e => setProductName(e.target.value)}/>\n            <button type='submit'>Add Product</button>\n        </form>\n    );\n};\n\nconst ProductItem = React.memo(({product, dispatch}) =>\n    <div>\n        <span> {product.name}</span>\n        <button onClick={() => dispatch({type: DELETE_PRODUCT, productId: product.id})}>delete</button>\n    </div>);\n\nconst ProductList = ({products, dispatch}) =>\n    <React.Fragment>\n        {products.map(product => <ProductItem key={product.id} product={product} dispatch={dispatch}/>)}\n    </React.Fragment>;\n\nexport default ProductsModule;\n\nReactDOM.render(<ProductsModule/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"1,8-17,23,24,34,47,52"}}),y=new b({props:{data:"<p>This an example where products can be added and removed with <em>useReducer</em></p><p>At lines 23,24 <em>dispatch</em> is passed as prop to <em>AddProduct</em> and <em>ProductList</em> components.</p><p><br></p><p>At line 34 on form submit <em>AddProduct</em> calls the dispatch function with <em>{type: ADD_PRODUCT, newProduct: {name: productName, id: new Date().getTime()}}</em>, so <em>productsReducer</em> will be triggred by react passing this action, so at line 11 reducer returns new state with our new product added. So <em>AddProduct</em> and <em>ProductList</em> components will be re-rendered with the new state.</p><p><br></p><p>And the same flow goes for deleting a product.</p>"}}),E=new D({props:{data:'<p>All the above work ca also be done with <a href="/courses/reactJs/reactHooks/useStateHook" target="_blank">useState</a>. But if we have complicated state(i.e state is having many properties and all properties are dependent) then <em>useReducer</em> is handy for state managment. Because we can out source the reducer and maintain a cleaner code.</p>'}});return{c(){e(i.$$.fragment),e(p.$$.fragment),e(u.$$.fragment),e(m.$$.fragment),e($.$$.fragment),e(f.$$.fragment),e(g.$$.fragment),e(h.$$.fragment),e(l.$$.fragment),e(w.$$.fragment),e(T.$$.fragment),e(v.$$.fragment),e(A.$$.fragment),e(y.$$.fragment),e(E.$$.fragment)},l(e){t(i.$$.fragment,e),t(p.$$.fragment,e),t(u.$$.fragment,e),t(m.$$.fragment,e),t($.$$.fragment,e),t(f.$$.fragment,e),t(g.$$.fragment,e),t(h.$$.fragment,e),t(l.$$.fragment,e),t(w.$$.fragment,e),t(T.$$.fragment,e),t(v.$$.fragment,e),t(A.$$.fragment,e),t(y.$$.fragment,e),t(E.$$.fragment,e)},m(e,t){a(i,e,t),a(p,e,t),a(u,e,t),a(m,e,t),a($,e,t),a(f,e,t),a(g,e,t),a(h,e,t),a(l,e,t),a(w,e,t),a(T,e,t),a(v,e,t),a(A,e,t),a(y,e,t),a(E,e,t),o=!0},p:n,i(e){o||(r(i.$$.fragment,e),r(p.$$.fragment,e),r(u.$$.fragment,e),r(m.$$.fragment,e),r($.$$.fragment,e),r(f.$$.fragment,e),r(g.$$.fragment,e),r(h.$$.fragment,e),r(l.$$.fragment,e),r(w.$$.fragment,e),r(T.$$.fragment,e),r(v.$$.fragment,e),r(A.$$.fragment,e),r(y.$$.fragment,e),r(E.$$.fragment,e),o=!0)},o(e){c(i.$$.fragment,e),c(p.$$.fragment,e),c(u.$$.fragment,e),c(m.$$.fragment,e),c($.$$.fragment,e),c(f.$$.fragment,e),c(g.$$.fragment,e),c(h.$$.fragment,e),c(l.$$.fragment,e),c(w.$$.fragment,e),c(T.$$.fragment,e),c(v.$$.fragment,e),c(A.$$.fragment,e),c(y.$$.fragment,e),c(E.$$.fragment,e),o=!1},d(e){s(i,e),s(p,e),s(u,e),s(m,e),s($,e),s(f,e),s(g,e),s(h,e),s(l,e),s(w,e),s(T,e),s(v,e),s(A,e),s(y,e),s(E,e)}}}function A(n){let h,l,w;const R=new T({props:{$$slots:{default:[v]},$$scope:{ctx:n}}});return{c(){h=d("meta"),l=o(),e(R.$$.fragment),this.h()},l(e){const a=i('[data-svelte="svelte-17kyloj"]',document.head);h=p(a,"META",{name:!0,content:!0}),a.forEach(u),l=m(e),t(R.$$.fragment,e),this.h()},h(){document.title="React useReducer",$(h,"name","description"),$(h,"content","React useReducer")},m(e,t){f(document.head,h),g(e,l,t),a(R,e,t),w=!0},p(e,[t]){const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),R.$set(a)},i(e){w||(r(R.$$.fragment,e),w=!0)},o(e){c(R.$$.fragment,e),w=!1},d(e){u(h),e&&u(l),s(R,e)}}}export default class extends h{constructor(e){super(),l(this,e,null,A,w,{})}}
