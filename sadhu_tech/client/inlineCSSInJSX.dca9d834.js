import{l as e,m as t,o as n,n as a,t as s,p as r,q as i,e as o,s as p,C as $,c as m,d as l,b as g,f as c,h as f,i as d,S,j as h,k as b}from"./client.f707559f.js";import"./Icon.b3087117.js";import"./Button.46d81a0e.js";import"./Image.a80d16de.js";import"./stores.ec09ff7a.js";import{H as u,P as w,a as y,C}from"./index.b8f1b6e6.js";function j(o){let p;const $=new u({props:{data:"Inline CSS in JSX",id:"inlineCSSInJSX",isBig:"true"}}),m=new w({props:{data:"<p>Inline CSS should be given as a Javascript object with CSS properties. The Javascript object with styles should be wrapped in curly braces in JSX.</p>"}}),l=new u({props:{data:"Inline CSS with actual CSS properies names",id:"inlineCSSWithActualCSSProperiesNames"}}),g=new y({props:{language:"javascript",uid:"0a58dfb1-19d0-11ea-8832-2b96578e9245",data:'const styles = {\n    "font-size": "100px",\n    "font-weight": "bold",\n    "background-color": "orange"\n};\n\nconst styledElement = <p style={styles}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}}),c=new w({props:{data:'<p>Observe the <em>styles</em> object all the CSS properties are wrapped in <em>"  "</em>. This is because Javascript doesn`t allow <em>-</em> in object\'s key name if it is not written in string format.</p><p><br></p><p>Alternately CSS properties can also be used in camel case in React.</p>'}}),f=new u({props:{data:"Inline CSS with camel cased properies",id:"inlineCSSWithCamelCasedProperies"}}),d=new y({props:{language:"javascript",uid:"b69d2211-19ce-11ea-8832-2b96578e9245",data:'const styles = {\n    fontSize: "100px",\n    fontWeight: "bold",\n    backgroundColor: "orange"\n};\n\nconst styledElement = <p style={styles}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}}),S=new w({props:{data:"<p>Observe the <em>styles</em> object it contains CSS properties in camel case.</p><p><strong>font-size</strong> as <strong><em>fontSize</em></strong></p><p><strong>font-weight</strong> as <strong><em>fontWeight</em></strong></p><p><strong>background-color</strong> as <strong><em>backgroundColor</em></strong></p><p>This is valid in React. React internally converts then to actual CSS properties.</p><p><br></p><p>Instead of refering a javascript object we can also put it directly in JSX.</p>"}}),h=new y({props:{language:"javascript",uid:"68c721b1-1af2-11ea-93f9-2b47fa5df4bc",data:'const styledElement = <p style={{fontSize:"100px"}}>This is styled element</p>;',pic:"",ratio:"4",highlight:""}});return{c(){e($.$$.fragment),e(m.$$.fragment),e(l.$$.fragment),e(g.$$.fragment),e(c.$$.fragment),e(f.$$.fragment),e(d.$$.fragment),e(S.$$.fragment),e(h.$$.fragment)},l(e){t($.$$.fragment,e),t(m.$$.fragment,e),t(l.$$.fragment,e),t(g.$$.fragment,e),t(c.$$.fragment,e),t(f.$$.fragment,e),t(d.$$.fragment,e),t(S.$$.fragment,e),t(h.$$.fragment,e)},m(e,t){n($,e,t),n(m,e,t),n(l,e,t),n(g,e,t),n(c,e,t),n(f,e,t),n(d,e,t),n(S,e,t),n(h,e,t),p=!0},p:a,i(e){p||(s($.$$.fragment,e),s(m.$$.fragment,e),s(l.$$.fragment,e),s(g.$$.fragment,e),s(c.$$.fragment,e),s(f.$$.fragment,e),s(d.$$.fragment,e),s(S.$$.fragment,e),s(h.$$.fragment,e),p=!0)},o(e){r($.$$.fragment,e),r(m.$$.fragment,e),r(l.$$.fragment,e),r(g.$$.fragment,e),r(c.$$.fragment,e),r(f.$$.fragment,e),r(d.$$.fragment,e),r(S.$$.fragment,e),r(h.$$.fragment,e),p=!1},d(e){i($,e),i(m,e),i(l,e),i(g,e),i(c,e),i(f,e),i(d,e),i(S,e),i(h,e)}}}function v(a){let S,h,b;const u=new C({props:{$$slots:{default:[j]},$$scope:{ctx:a}}});return{c(){S=o("meta"),h=p(),e(u.$$.fragment),this.h()},l(e){const n=$('[data-svelte="svelte-l7wbb9"]',document.head);S=m(n,"META",{name:!0,content:!0}),n.forEach(l),h=g(e),t(u.$$.fragment,e),this.h()},h(){document.title="Inline CSS in JSX",c(S,"name","description"),c(S,"content","Inline CSS in JSX")},m(e,t){f(document.head,S),d(e,h,t),n(u,e,t),b=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),u.$set(n)},i(e){b||(s(u.$$.fragment,e),b=!0)},o(e){r(u.$$.fragment,e),b=!1},d(e){l(S),e&&l(h),i(u,e)}}}export default class extends S{constructor(e){super(),h(this,e,null,v,b,{})}}
