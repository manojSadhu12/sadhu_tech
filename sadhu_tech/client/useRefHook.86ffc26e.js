import{l as e,m as r,o as t,n,t as a,p as s,q as o,e as c,s as l,C as i,c as f,d as u,b as p,f as g,h as m,i as d,S as $,j as b,k as R}from"./client.9c259cf4.js";import"./Icon.680bd4d0.js";import"./Button.44f5306d.js";import"./Image.c8019b1e.js";import"./stores.2b7dbef2.js";import{H as h,a as v,P as y,N as k,C as w}from"./index.7beba4f9.js";function I(c){let l;const i=new h({props:{data:"useRef",id:"useRef",isBig:"true"}}),f=new v({props:{language:"javascript",uid:"cd08e921-7307-11ea-9c38-adea875d5f90",data:"/**\n * @param takes an initial value for its .current property. It can be of any type.\n * @return same object for every re-render.\n */\nconst aRef = useRef(initialValue);",pic:"",ratio:"4",highlight:""}}),u=new y({props:{data:'<p><span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useRef </span> holds a mutable value in it\'s <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> .current </span> property. It carries this mutable value for every render. <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> ref.current </span> is a javaScript object that can hold references of DOM element as well as any custom object.</p><p><br></p><p><span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useRef </span> can be treated as instance variable of class component because It holds a mutable value and persists till the life of function component.</p><p><br></p>'}}),p=new h({props:{data:"Accessing DOM elements with useRef",id:"accessingDOMElementsWithUseRef"}}),g=new v({props:{language:"javascript",uid:"da471461-730a-11ea-9c38-adea875d5f90",data:"import React, {useEffect, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nconst FocusInput = () => {\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus()\n    }, []);\n\n    return (\n        <React.Fragment>\n            <input ref={inputRef} placeholder=\"Product Name\"/>\n        </React.Fragment>\n    );\n};\n\nexport default FocusInput;\n\nReactDOM.render(<FocusInput/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"1,6,9,14"}}),m=new y({props:{data:'<p>In this example we are focussing our input element on the first render.</p><p><br></p><ul><li>At line 1 we are importing <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useRef </span>.</li><li>At line 6 we are creating inputRef with null as initial value.</li><li>At line 14 <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> ref={inputRef} </span> sets the <span style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> .current </span> property of inputRef.</li><li>At line 9 we are focussing the input element.</li></ul>'}}),d=new h({props:{data:"Keeping a variable in useRef",id:"keepingAVariableInUseRef"}}),$=new v({props:{language:"javascript",uid:"bfe6d6c1-7317-11ea-9c38-adea875d5f90",data:"import React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nconst Timer = () => {\n    const [count, setCount] = useState(0);\n    const timerRef = useRef(null);\n\n    useEffect(() => {\n        timerRef.current = setInterval(() => {\n            setCount(previousCount => previousCount + 1)\n        }, 1000)\n    }, []);\n\n    return (\n        <React.Fragment>\n            <p>{count}</p>\n            <button onClick={()=> clearInterval(timerRef.current)}>Clear Interval</button>\n        </React.Fragment>\n    );\n};\n\nexport default Timer;\n\nReactDOM.render(<Timer/>, document.getElementById('root'));",pic:"",ratio:"4",highlight:"7, 10-13,18"}}),b=new y({props:{data:'<p>In this example <span style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> useRef </span> holds <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> timerRef </span> for re-renders.</p><p><br></p><ul><li>At line 7 we are creating timerRef with null as initial value.</li><li>At line 10 we are assigning interval reference to <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> .current </span> property of <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> timerRef </span>. Here at every second <strong>setCount()</strong> is called so the function re-renders, <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> useRef </span> gives same <span style="color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);"> timerRef </span> reference every time.</li><li>At line 18 <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> clearInterval(timerRef.current) </span> the interval is cleared on button click. As <span style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);"> timerRef.current </span> is persisted for every render this works.</li></ul><p><br></p>'}}),R=new k({props:{data:'<ul><li>Refs can be used to asses DOM or React nodes and for keeping mutable variables.</li><li>Ref current value can be assigned in <a href="/courses/reactJs/reactHooks/useEffectHook" target="_blank">useEffect</a>, useLayoutEffect and event handlers.</li><li>Changing ref current value doesn\'t give any trigger or doesn\'t cause re-render.</li></ul>'}});return{c(){e(i.$$.fragment),e(f.$$.fragment),e(u.$$.fragment),e(p.$$.fragment),e(g.$$.fragment),e(m.$$.fragment),e(d.$$.fragment),e($.$$.fragment),e(b.$$.fragment),e(R.$$.fragment)},l(e){r(i.$$.fragment,e),r(f.$$.fragment,e),r(u.$$.fragment,e),r(p.$$.fragment,e),r(g.$$.fragment,e),r(m.$$.fragment,e),r(d.$$.fragment,e),r($.$$.fragment,e),r(b.$$.fragment,e),r(R.$$.fragment,e)},m(e,r){t(i,e,r),t(f,e,r),t(u,e,r),t(p,e,r),t(g,e,r),t(m,e,r),t(d,e,r),t($,e,r),t(b,e,r),t(R,e,r),l=!0},p:n,i(e){l||(a(i.$$.fragment,e),a(f.$$.fragment,e),a(u.$$.fragment,e),a(p.$$.fragment,e),a(g.$$.fragment,e),a(m.$$.fragment,e),a(d.$$.fragment,e),a($.$$.fragment,e),a(b.$$.fragment,e),a(R.$$.fragment,e),l=!0)},o(e){s(i.$$.fragment,e),s(f.$$.fragment,e),s(u.$$.fragment,e),s(p.$$.fragment,e),s(g.$$.fragment,e),s(m.$$.fragment,e),s(d.$$.fragment,e),s($.$$.fragment,e),s(b.$$.fragment,e),s(R.$$.fragment,e),l=!1},d(e){o(i,e),o(f,e),o(u,e),o(p,e),o(g,e),o(m,e),o(d,e),o($,e),o(b,e),o(R,e)}}}function j(n){let $,b,R;const h=new w({props:{$$slots:{default:[I]},$$scope:{ctx:n}}});return{c(){$=c("meta"),b=l(),e(h.$$.fragment),this.h()},l(e){const t=i('[data-svelte="svelte-ak2g0n"]',document.head);$=f(t,"META",{name:!0,content:!0}),t.forEach(u),b=p(e),r(h.$$.fragment,e),this.h()},h(){document.title="React useRef",g($,"name","description"),g($,"content","React useRef")},m(e,r){m(document.head,$),d(e,b,r),t(h,e,r),R=!0},p(e,[r]){const t={};1&r&&(t.$$scope={dirty:r,ctx:e}),h.$set(t)},i(e){R||(a(h.$$.fragment,e),R=!0)},o(e){s(h.$$.fragment,e),R=!1},d(e){u($),e&&u(b),o(h,e)}}}export default class extends ${constructor(e){super(),b(this,e,null,j,R,{})}}
